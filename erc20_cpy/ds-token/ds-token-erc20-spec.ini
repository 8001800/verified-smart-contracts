; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md

[totalSupply]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
callData: #abiCallData("totalSupply", .TypedArgs)
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_totalsupply}, .IntList) |-> TOTAL
    _:Map
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)

[balanceOf]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
callData: #abiCallData("balanceOf", #address(OWNER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)

[allowance]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve]
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
gas: {GASCAP} => _
log:  _ => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
    _:Map
requires:
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)


[approve-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> (_:Int => VALUE)
+requires:
    andBool STOPPED ==Int 0 

[approve-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _
+requires:
    andBool STOPPED ==Int 1 <<Int (20 *Int 8)

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
log: _ => _
gas: {GASCAP} => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
requires:
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)

[transfer-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)

[transfer-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool STOPPED ==Int 0

[transfer-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool STOPPED ==Int 0

[transfer-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _

[transfer-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID


[transfer-failure-1-a]
+requires:
    andBool VALUE >Int BAL_FROM


[transfer-failure-1-b]
+requires:
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)

[transfer-failure-1-c]
+requires:
    andBool STOPPED ==Int 1 <<Int (20 *Int 8)

[transfer-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID

[transfer-failure-2-a]
+requires:
    andBool VALUE >Int BAL_FROM

[transfer-failure-2-b]
+requires:
    andBool STOPPED ==Int 1 <<Int (20 *Int 8)


[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
gas: {GASCAP} => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
requires:
    andBool 0 <=Int FROM_ID   andBool FROM_ID   <Int (2 ^Int 160)
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int ALLOW     andBool ALLOW     <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)

[transferFrom-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _ => _

[transferFrom-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool VALUE <=Int ALLOW
    andBool STOPPED ==Int 0

[transferFrom-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool STOPPED ==Int 0

[transferFrom-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _
log: _ => _

[transferFrom-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => _)  // BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => _)  // BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => _)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID

[transferFrom-failure-1-a]
+requires:
    andBool VALUE >Int BAL_FROM


[transferFrom-failure-1-b]
+requires:
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)

[transferFrom-failure-1-c]
+requires:
    andBool VALUE >Int ALLOW

[transferFrom-failure-1-d]
+requires:
    andBool STOPPED ==Int 1 <<Int (20 *Int 8)

[transferFrom-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID

[transferFrom-failure-2-a]
+requires:
    andBool VALUE >Int BAL_FROM

[transferFrom-failure-2-b]
+requires:
    andBool VALUE >Int ALLOW

[transferFrom-failure-2-c]
+requires:
    andBool STOPPED ==Int 1 <<Int (20 *Int 8)

[pgm]
compiler: "Solidity"
gasCap: 100000
