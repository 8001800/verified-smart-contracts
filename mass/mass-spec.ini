[fallback]
; k: (#execute => #halt) ~> _
k: (#call #CALLER_ID {CONTRACT_ADDRESS} {CONTRACT_ADDRESS} #gas(INITGAS, 0, 0) CALL_VALUE CALL_VALUE .WordStack false => #halt) ~> _
output: _ => _
callStack: _ => _
interimStates: _ => _
callDepth: 0 => 1
callData: .WordStack
callValue: CALL_VALUE
log: _ => _
refund: _ => _
acct_balance: ACCT_BALANCE => ACCT_BALANCE +Int CALL_VALUE
caller_balance: CALLER_BALANCE => CALLER_BALANCE -Int CALL_VALUE
storage:
    M:IMap
requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool #rangeUInt(256, ACCT_BALANCE)
    andBool #rangeUInt(256, CALLER_BALANCE)
    andBool CALLER_BALANCE >=Int CALL_VALUE
    andBool ACCT_BALANCE +Int CALL_VALUE <=Int maxUInt256
    andBool ACCT_BALANCE -Int CALL_VALUE >=Int 0

[fallback-run]
statusCode: _ => _

; gas usage?
[fallback-payable]
statusCode: _ => EVMC_SUCCESS

[fallback-fail]
statusCode: _ => EVMC_REVERT

; illegal ops in fallback
[fallback-call]
k: (#execute ~> _) => (#exec [ CALL ] ~> _)
statusCode: _ => _

[fallback-delegatecall]
k: (#execute ~> _) => (#exec [ DELEGATECALL ] ~> _)
statusCode: _ => _

[root]
schedule: BYZANTIUM
accounts:
activeAccounts: SetItem({CONTRACT_ADDRESS}) SetItem(#CALLER_ID) _:Set
acct_balance: _ => _
caller_balance: _ => _
requires:
ensures:

[pgm]
compiler: "Solidity"
