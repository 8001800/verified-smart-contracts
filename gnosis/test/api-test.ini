[root]
comment:
k: (#execute => #halt) ~> _
callStack: _
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: 10000000 => _
memoryUsed: 0 => _
callDepth: CD
log: _ => _
refund: _ => _
coinbase: _ => _
activeAccounts: SetItem(MASTER_COPY_ID) SetItem(PROXY_ID) SetItem(ORIGIN_ID) _:Set
master_copy_bal: _
master_copy_storage: _:Map
master_copy_nonce: _
proxy_bal: _
proxy_nonce: _
origin_bal: _
origin_code: ""
origin_storage: _:Map
origin_nonce: _
accounts:
code: {MASTER_COPY_CODE}
this: PROXY_ID
msg_sender: MSG_SENDER
proxy_storage: _:Map
requires:
    andBool #range(0 <= CD < 1024)
ensures:
attribute:

[testKeccak]
output: _ => #asByteStackInWidth(keccak(#asByteStackInWidth(DATA, DATA_LEN)), 32)
statusCode: _ => EVMC_SUCCESS
this: PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testKeccak", #toBytes(DATA, DATA_LEN))
callValue: 0
+requires:
    // Range
    andBool #rangeAddress(PROXY_ID)
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeUInt( 256,        DATA_LEN)
    andBool #rangeBytes( DATA_LEN,  DATA)

; also tested: 16, 64.
[testKeccak-data1]
+requires:
    andBool DATA_LEN ==Int 1

[testKeccak-data32]
+requires:
    andBool DATA_LEN ==Int 32

[testKeccak-data33]
+requires:
    andBool DATA_LEN ==Int 33

[testAbiEncode]
output: _ => #encodeArgs(#uint256(32), #uint256(352)) ++ //prefix for tuple encoding
             #encodeArgs(#bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                         #address(TO),
                         #uint256(VALUE),
                         #bytes32(KECCAK_OUT),
                         #uint8(OPERATION),
                         #uint256(SAFE_TX_GAS),
                         #uint256(DATA_GAS),
                         #uint256(GAS_PRICE),
                         #address(GAS_TOKEN),
                         #address(REFUND_RECEIVER),
                         #uint256(NONCE))
statusCode: _ => EVMC_SUCCESS
code: {MASTER_COPY_CODE}
this: PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testAbiEncode",
            #address(TO),
            #uint256(VALUE),
            #bytes32(KECCAK_OUT),
            ; Enum.Operation operation, represented as uint8
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) )
callValue: 0
+requires:
    // Range
    andBool #rangeAddress(PROXY_ID)
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeAddress(          TO)
    andBool #rangeUInt( 256,        VALUE)
    andBool #rangeUInt( 256,        KECCAK_OUT)
    ; version below doesn't work, needs macro computation probably
    ;andBool #rangeBytes( 32,        KECCAK_OUT)
    andBool #rangeUInt(   8,        OPERATION)
    ; enum Enum.Operation, 3 possible values encoded to 0-2.
    andBool OPERATION <=Int 2
    andBool #rangeUInt( 256,        SAFE_TX_GAS)
    andBool #rangeUInt( 256,        DATA_GAS)
    andBool #rangeUInt( 256,        GAS_PRICE)
    andBool #rangeAddress(          GAS_TOKEN)
    andBool #rangeAddress(          REFUND_RECEIVER)
    andBool #rangeUInt( 256,        NONCE)

    andBool #rangeAddress(          MASTER_COPY_ID)
    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

    andBool TO =/=Int GAS_TOKEN
    andBool TO =/=Int REFUND_RECEIVER
    andBool GAS_TOKEN =/=Int REFUND_RECEIVER

[pgm]
compiler: "Solidity"
safe_tx_typehash: "0x14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b20"
master_copy_code: "0x608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639779872514610067578063b9874538146100ec578063ccafc3871461026d578063e580940c146102a0575b600080fd5b34801561007357600080fd5b506100ce600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103e9565b60405180826000191660001916815260200191505060405180910390f35b3480156100f857600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610455565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102826105fe565b60405180826000191660001916815260200191505060405180910390f35b3480156102ac57600080fd5b5061036e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600019169060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610625565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ae578082015181840152602081019050610393565b50505050905090810190601f1680156103db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000816040518082805190602001908083835b60208310151561042157805182526020820191506020810190506020830392506103fc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60607f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b206001028b8b8b6040518082805190602001908083835b6020831015156104b3578051825260208201915060208101905060208303925061048e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208b8b8b8b8b8b8b604051602001808c600019166000191681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001896000191660001916815260200188600281111561054e57fe5b60ff1681526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b50505050505050505050505060405160208183030381529060405290509a9950505050505050505050565b7f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b2060010281565b60607f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b206001028b8b8b8b8b8b8b8b8b8b604051602001808c600019166000191681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a815260200189600019166000191681526020018860028111156106bc57fe5b60ff1681526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b50505050505050505050505060405160208183030381529060405290509a99505050505050505050505600a165627a7a723058207401a652230dd7fc1b69cd891cdc402282b078b66dce916c6e58aba85ecc15590029"
proxy_code: "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634555d5c91461008b5780635c60da1b146100b6575b73ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415610086573d6000fd5b3d6000f35b34801561009757600080fd5b506100a061010d565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100cb610116565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006002905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050905600a165627a7a723058209831bad75772164414931a91aa4e9e2be55d2879d839299b8d19bbe1a373cde60029"
