; casper commit: master b2a1189
; vyper  commit: master 7b1e018 vyper -f bytecode_runtime simple_casper.v.py
; k      commit: casper 5c25763980fd52c92c637395a7fd64e561569512
; kevm   commit: master 777c67828c5b26f39112bad709e9a65a337f7de5


[recommended_target_hash]
comment: 
k: (#execute => #halt) ~> _
output: _ => #asByteStackInWidth(#recommendedBlockHash(BLOCK_HASHES, BLOCK_NUM, CUR_EPOCH, EPOCH_LENGTH), 32)
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("recommended_target_hash", .TypedArgs)
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: GCAP => GCAP -Int 893
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _
coinbase: _
activeAccounts: SetItem(CASPER_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage:
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.EPOCH_LENGTH
    (#hashedLocation({COMPILER}, {EPOCH_LENGTH}, .IntList) |-> EPOCH_LENGTH)
    _:Map
accounts: 
requires:
    // Range
    andBool #rangeSInt(128, EPOCH_LENGTH)
    andBool #rangeSInt(128, CUR_EPOCH)
    andBool #rangeUInt(256, CASPER_BAL)
    // Invariant
    andBool EPOCH_LENGTH >Int 0
    andBool CUR_EPOCH >Int 0
    // Overflow check
    andBool (CUR_EPOCH *Int EPOCH_LENGTH) <=Int maxSInt128
    andBool #range(BLOCK_NUM -Int 256 <= #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH) < BLOCK_NUM)
    // Call depth
    andBool #range(0 <= CD < 1024)
    // Gas
    andBool GCAP >=Int 893
ensures:
attribute: 

[sqrt_of_total_deposits_loop]
comment: 
k: (#execute => #execute) ~> _
output: _
statusCode: _
callStack: _
callData: _
callValue: _
wordStack: ROUNDS : 416 : .WordStack
localMem: ((.Map[128 := #padToWidth(32, #asByteStack(maxSFixed128x10))]
                [160 := #padToWidth(32, #asByteStack(minDecimal_2s))]
                [352 := #padToWidth(32, #asByteStack(ETHER_DEPOSITED_AS_NUMBER))]
                [384 := #padToWidth(32, #asByteStack(SQRT))]
                [416 := #padToWidth(32, #asByteStack(LOOPINDEX))])
         =>(.Map[128 := #padToWidth(32, #asByteStack(maxSFixed128x10))]
                [160 := #padToWidth(32, #asByteStack(minDecimal_2s))]
                [352 := #padToWidth(32, #asByteStack(ETHER_DEPOSITED_AS_NUMBER))]
                [384 := #padToWidth(32, #asByteStack(#quadOverLinear(SQRT, ETHER_DEPOSITED_AS_NUMBER, ROUNDS -Int LOOPINDEX)))]
                [416 := #padToWidth(32, #asByteStack(ROUNDS))]))
          _ :Map
pc: 813 => 947
gas: GCAP => GCAP -Int 296 *Int (ROUNDS -Int LOOPINDEX)
memoryUsed: 14
callDepth: CD
log: _
refund: _
coinbase: _
activeAccounts: SetItem(CASPER_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage: _:Map
accounts: 
requires: 
  andBool #rangeSInt(128, ROUNDS)
  andBool #rangeSInt(128, ETHER_DEPOSITED_AS_NUMBER)
  andBool #rangeSFixed(128, 10, SQRT)
  andBool #range(0 <= LOOPINDEX < ROUNDS)
  // Invariant
  andBool 0  <Int ROUNDS
  andBool 6 <=Int ETHER_DEPOSITED_AS_NUMBER
  andBool 0  <Int SQRT
  andBool #range(#quadOverLinearLowerBound(ETHER_DEPOSITED_AS_NUMBER) <= SQRT <= (ETHER_DEPOSITED_AS_NUMBER *Int 100000000000000000000) /Int 20000000000)
  // Call depth
  andBool #range(0 <= CD < 1024)
  // GAS
  andBool GCAP >=Int 296 *Int (ROUNDS -Int LOOPINDEX)
ensures: 
attribute: 

[sqrt_of_total_deposits]
comment: 
k: (#execute => #halt) ~> _
output: _ => _
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("sqrt_of_total_deposits", .TypedArgs)
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: 100000 => _
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _
coinbase: _
activeAccounts: SetItem(CASPER_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage:
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.total_curdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> TOTAL_CUR_DYN_DEPOSITS)
    // self.total_prevdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> TOTAL_PREV_DYN_DEPOSITS)
    // self.deposit_scale_factor[epoch - 1]
    (#hashedLocation({COMPILER}, {DEPOSIT_SCALE_FACTOR}, CUR_EPOCH -Int 1) |-> DEPOSIT_SCALE_FACTOR)
    _:Map
accounts: 
requires:
    andBool #rangeSInt(128, CUR_EPOCH)
    andBool #rangeSFixed(128, 10, TOTAL_CUR_DYN_DEPOSITS)
    andBool #rangeSFixed(128, 10, TOTAL_PREV_DYN_DEPOSITS)
    andBool #rangeSFixed(128, 10, DEPOSIT_SCALE_FACTOR)
    andBool 0  <Int CUR_EPOCH               andBool CUR_EPOCH               <=Int maxSInt128
    andBool 0 <=Int TOTAL_CUR_DYN_DEPOSITS  andBool TOTAL_CUR_DYN_DEPOSITS  <=Int maxDecimal
    andBool 0 <=Int TOTAL_PREV_DYN_DEPOSITS andBool TOTAL_PREV_DYN_DEPOSITS <=Int maxDecimal
    andBool 0  <Int DEPOSIT_SCALE_FACTOR    andBool DEPOSIT_SCALE_FACTOR    <=Int maxDecimal
    // Invariant
    andBool 0  <Int CUR_EPOCH
    andBool 0 <=Int TOTAL_CUR_DYN_DEPOSITS
    andBool 0 <=Int TOTAL_PREV_DYN_DEPOSITS
    andBool 0  <Int DEPOSIT_SCALE_FACTOR
    andBool 6 <=Int #etherDeposit(TOTAL_CUR_DYN_DEPOSITS, DEPOSIT_SCALE_FACTOR)
    // Overflow check
    andBool TOTAL_CUR_DYN_DEPOSITS *Int DEPOSIT_SCALE_FACTOR <=Int maxDecimal *Int 10000000000
    // Path condition
    andBool CALLER_ID ==Int CASPER_ACCT_ID
    andBool TOTAL_PREV_DYN_DEPOSITS <Int TOTAL_CUR_DYN_DEPOSITS
    // Call depth
    andBool 0 <=Int CD andBool CD <Int 1024
    // Gas
ensures:
attribute: 

[proc_reward]
comment: 
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("proc_reward", #int128(VINDEX), #int128(REWARD))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: GCAP => GCAP -Int 92207
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _ => _
coinbase: COINBASE_ACCT_ID
activeAccounts: SetItem(CASPER_ACCT_ID) SetItem(COINBASE_ACCT_ID) _:Set
casperBalance: CASPER_BAL => CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
storage:
    // self.validators[validator_index].deposit
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> (VDEPOSIT => VDEPOSIT +Int REWARD *Int 10000000000))
    // self.validators[validator_index].end_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {END_DYNASTY}) |-> END_DYN)
    // self.validators[validator_index].start_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {START_DYNASTY}) |-> START_DYN)
    // self.dynasty
    (#hashedLocation({COMPILER}, {DYNASTY}, .IntList) |-> CUR_DYN)
    // self.dynasty_wei_delta[end_dynasty]
    (#hashedLocation({COMPILER}, {DYNASTY_WEI_DELTA}, END_DYN) |-> (#unsigned(DYN_WEI_DELTA) => #unsigned(DYN_WEI_DELTA -Int REWARD *Int 10000000000)))
    // self.total_curdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> (TOTAL_CUR_DYN_DEPOSITS => TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000))
    // self.total_prevdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> (TOTAL_PREV_DYN_DEPOSITS => TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000))
    // self.deposit_scale_factor[self.current_epoch]
    (#hashedLocation({COMPILER}, {DEPOSIT_SCALE_FACTOR}, CUR_EPOCH) |-> CUR_EPOCH_SCALE_FACTOR)
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.default_end_dynasty
    (#hashedLocation({COMPILER}, {DEFAULT_END_DYNASTY}, .IntList) |-> DEFAULT_END_DYN)
    _:Map
accounts:
    <account>
      <acctID> COINBASE_ACCT_ID </acctID>
      <balance> COINBASE_BAL => COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) </balance>
      <code> .WordStack </code>
      <storage> _ </storage>
      <nonce> COINBASE_NOUNCE </nonce>
    </account>
requires:
    andBool #rangeSInt(128, VINDEX)
    andBool #rangeSInt(128, REWARD)
    andBool #rangeAddress(COINBASE_ACCT_ID)
    andBool #rangeUInt(256, CASPER_BAL)
    andBool #rangeSFixed(128, 10, VDEPOSIT)
    andBool #rangeSInt(128, END_DYN)
    andBool #rangeSInt(128, START_DYN)
    andBool #rangeSInt(128, CUR_DYN)
    andBool #rangeSFixed(128, 10, DYN_WEI_DELTA)
    andBool #rangeSFixed(128, 10, TOTAL_CUR_DYN_DEPOSITS)
    andBool #rangeSFixed(128, 10, TOTAL_PREV_DYN_DEPOSITS)
    andBool #rangeSFixed(128, 10, CUR_EPOCH_SCALE_FACTOR)
    andBool #rangeSInt(128, CUR_EPOCH)
    andBool #rangeSInt(128, DEFAULT_END_DYN)
    andBool #rangeUInt(256, COINBASE_BAL)
    andBool #rangeUInt(256, COINBASE_NOUNCE)
    // Invariant
    andBool VINDEX >Int 0
    andBool REWARD >=Int 0
    andBool COINBASE_ACCT_ID >Int 0 andBool (notBool COINBASE_ACCT_ID in #precompiledAccounts(BYZANTIUM))
    andBool VDEPOSIT >=Int 0
    andBool END_DYN >=Int 0
    andBool START_DYN >=Int 0
    andBool CUR_DYN >=Int 0
    andBool TOTAL_CUR_DYN_DEPOSITS >=Int 0
    andBool TOTAL_PREV_DYN_DEPOSITS >=Int 0
    andBool CUR_EPOCH_SCALE_FACTOR >Int 0
    andBool CUR_EPOCH >=Int 0
    andBool DEFAULT_END_DYN >=Int 0
    andBool COINBASE_NOUNCE >Int 0
    // Overflow check
    andBool (VDEPOSIT +Int REWARD *Int 10000000000) <=Int maxSFixed128x10
    andBool minSFixed128x10 <=Int (DYN_WEI_DELTA -Int REWARD *Int 10000000000)
    andBool TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000 <=Int maxSFixed128x10
    andBool TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000 <=Int maxSFixed128x10
    andBool REWARD *Int CUR_EPOCH_SCALE_FACTOR <=Int maxSFixed128x10
    andBool 0 <=Int CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
    andBool COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) <=Int maxUInt256
    // Path condition
    andBool CALLER_ID ==Int CASPER_ACCT_ID
    andBool #inCurDynasty(START_DYN, END_DYN, CUR_DYN)
    andBool #inPrevDynasty(START_DYN, END_DYN, CUR_DYN)
    andBool END_DYN <Int DEFAULT_END_DYN
    andBool 0 <Int (REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000
    andBool CASPER_ACCT_ID =/=Int COINBASE_ACCT_ID
    // Call Depth
    andBool #range(0 <= CD < 1024)
    // Gas
    andBool GCAP >=Int (92207 +Int 2300) // Gcallstipend
ensures: 
attribute: 

[vote]
comment: 
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("vote", #int128(VINDEX), #bytes32(T_HASH), #int128(T_EPOCH), #int128(S_EPOCH))
;callData: #abiCallData("vote", #bytes(1024, RLP(#int128(VINDEX), #bytes32(T_HASH), #int128(T_EPOCH), #int128(S_EPOCH), #bytes(1024, SIG))))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
;gas cost 274618
gas: 10000000 => _
memoryUsed: 0 => _
callDepth: 0
log: _:List ( .List
            => ListItem(#abiEventLog(CASPER_ACCT_ID, "Epoch", #indexed(#int128(T_EPOCH)), #indexed(#bytes32(T_EPOCH_HASH)), #bool(1), #bool(0)))
               ListItem(#abiEventLog(CASPER_ACCT_ID, "Epoch", #indexed(#int128(S_EPOCH)), #indexed(#bytes32(S_EPOCH_HASH)), #bool(1), #bool(1)))
               ListItem(#abiEventLog(CASPER_ACCT_ID, "Vote", #indexed(#address(VWITHDRAWALADDR)), #indexed(#int128(VINDEX)), #indexed(#bytes32(T_HASH)), #int128(T_EPOCH), #int128(S_EPOCH)))
            )
refund: _ => _
coinbase: COINBASE_ACCT_ID
activeAccounts: SetItem(CASPER_ACCT_ID) SetItem(COINBASE_ACCT_ID) _:Set
casperBalance: CASPER_BAL => CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
storage:
    // self.validators[validator_index].deposit
    // (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> VDEPOSIT)
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> (VDEPOSIT => VDEPOSIT +Int REWARD *Int 10000000000))
    // self.validators[validator_index].end_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {END_DYNASTY}) |-> END_DYN)
    // self.validators[validator_index].start_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {START_DYNASTY}) |-> START_DYN)
    // self.validators[validator_index].withdrawal_addr
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {WITHDRAWAL_ADDR}) |-> VWITHDRAWALADDR)
    // self.checkpoint_hashes[source_epoch]
    (#hashedLocation({COMPILER}, {CHECKPOINT_HASHES}, S_EPOCH) |-> S_EPOCH_HASH)
    // self.checkpoint_hashes[target_epoch]
    (#hashedLocation({COMPILER}, {CHECKPOINT_HASHES}, T_EPOCH) |-> T_EPOCH_HASH)
    // self.dynasty
    (#hashedLocation({COMPILER}, {DYNASTY}, .IntList) |-> CUR_DYN)
    // self.dynasty_wei_delta[end_dynasty]
    // (#hashedLocation({COMPILER}, {DYNASTY_WEI_DELTA}, END_DYN) |-> DYN_WEI_DELTA)
    (#hashedLocation({COMPILER}, {DYNASTY_WEI_DELTA}, END_DYN) |-> (#unsigned(DYN_WEI_DELTA) => #unsigned(DYN_WEI_DELTA -Int REWARD *Int 10000000000)))
    // self.total_curdyn_deposits
    // (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> TOTAL_CUR_DYN_DEPOSITS)
    (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> (TOTAL_CUR_DYN_DEPOSITS => TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000))
    // self.total_prevdyn_deposits
    // (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> TOTAL_PREV_DYN_DEPOSITS)
    (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> (TOTAL_PREV_DYN_DEPOSITS => TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000))
    // assert self.votes[source_epoch].is_justified
    (#hashedLocation({COMPILER}, {VOTES}, S_EPOCH {IS_JUSTIFIED}) |-> 1)
    // self.votes[source_epoch].is_finalized
    (#hashedLocation({COMPILER}, {VOTES}, S_EPOCH {IS_FINALIZED}) |-> (_ => 1))
    // self.votes[target_epoch].cur_dyn_votes[source_epoch]
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {CUR_DYN_VOTES} S_EPOCH) |-> (CUR_DYN_VOTES => CUR_DYN_VOTES +Int VDEPOSIT))
    // self.votes[target_epoch].is_justified
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {IS_JUSTIFIED}) |-> (0 => 1))
    // self.votes[target_epoch].prev_dyn_votes[source_epoch]
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {PREV_DYN_VOTES} S_EPOCH) |-> (PREV_DYN_VOTES => PREV_DYN_VOTES +Int VDEPOSIT))
    // self.votes[target_epoch].vote_bitmap[floor(validator_index / 256)]
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {VOTE_BITMAP} VIDKEY) |-> (VOTE_VECTOR => #setVoteBit(VOTE_VECTOR, VINDEX)))
    // self.main_hash_justified
    (#hashedLocation({COMPILER}, {MAIN_HASH_JUSTIFIED}, .IntList) |-> (_ => 1))
    // self.deposit_scale_factor[self.current_epoch]
    (#hashedLocation({COMPILER}, {DEPOSIT_SCALE_FACTOR}, CUR_EPOCH) |-> CUR_EPOCH_SCALE_FACTOR)
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.last_finalized_epoch
    (#hashedLocation({COMPILER}, {LAST_FINALIZED_EPOCH}, .IntList) |-> (_ => S_EPOCH))
    // self.last_justified_epoch
    (#hashedLocation({COMPILER}, {LAST_JUSTIFIED_EPOCH}, .IntList) |-> (_ => T_EPOCH))
    // self.reward_factor
    (#hashedLocation({COMPILER}, {REWARD_FACTOR}, .IntList) |-> REWARD_FACTOR)
    // self.expected_source_epoch
    (#hashedLocation({COMPILER}, {EXPECTED_SOURCE_EPOCH}, .IntList) |-> EXPECTED_SOURCE_EPOCH)
    // self.EPOCH_LENGTH
    (#hashedLocation({COMPILER}, {EPOCH_LENGTH}, .IntList) |-> EPOCH_LENGTH)
    // self.DEFAULT_END_DYNASTY
    (#hashedLocation({COMPILER}, {DEFAULT_END_DYNASTY}, .IntList) |-> DEFAULT_END_DYN)
    _:Map
accounts:
    <account>
      <acctID> COINBASE_ACCT_ID </acctID>
      <balance> COINBASE_BAL => COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) </balance>
      <code> .WordStack </code>
      <storage> _ </storage>
      <nonce> COINBASE_NOUNCE </nonce>
    </account>
requires:
    // Type constraint
    andBool 0  <Int VINDEX                  andBool VINDEX                  <=Int maxSInt128  // start validator index counter at 1
    andBool 0 <=Int T_HASH                  andBool T_HASH                  <=Int maxUInt256
    andBool 0 <=Int T_EPOCH                 andBool T_EPOCH                 <=Int maxSInt128
    andBool 0 <=Int S_EPOCH                 andBool S_EPOCH                 <=Int maxSInt128
    andBool 0 <=Int CASPER_BAL              andBool CASPER_BAL              <=Int maxUInt256
    andBool 0  <Int COINBASE_ACCT_ID        andBool COINBASE_ACCT_ID        <=Int maxUInt160
    andBool (notBool COINBASE_ACCT_ID in #precompiledAccounts(BYZANTIUM))
    andBool 0 <=Int VDEPOSIT                andBool VDEPOSIT                <=Int maxDecimal
    andBool 0 <=Int END_DYN                 andBool END_DYN                 <=Int maxSInt128
    andBool 0 <=Int START_DYN               andBool START_DYN               <=Int maxSInt128
    andBool 0 <=Int VWITHDRAWALADDR         andBool VWITHDRAWALADDR         <=Int maxUInt160
    andBool 0 <=Int S_EPOCH_HASH            andBool S_EPOCH_HASH            <=Int maxUInt256
    andBool 0 <=Int T_EPOCH_HASH            andBool T_EPOCH_HASH            <=Int maxUInt256
    andBool 0 <=Int CUR_DYN                 andBool CUR_DYN                 <=Int maxSInt128
    andBool minDecimal <=Int DYN_WEI_DELTA  andBool DYN_WEI_DELTA           <=Int maxDecimal
    andBool 0 <=Int TOTAL_CUR_DYN_DEPOSITS  andBool TOTAL_CUR_DYN_DEPOSITS  <=Int maxDecimal
    andBool 0 <=Int TOTAL_PREV_DYN_DEPOSITS andBool TOTAL_PREV_DYN_DEPOSITS <=Int maxDecimal
    andBool 0 <=Int CUR_DYN_VOTES           andBool CUR_DYN_VOTES           <=Int maxDecimal
    andBool 0 <=Int PREV_DYN_VOTES          andBool PREV_DYN_VOTES          <=Int maxDecimal
    andBool 0 <=Int VOTE_VECTOR             andBool VOTE_VECTOR             <=Int maxUInt256
    andBool 0  <Int CUR_EPOCH_SCALE_FACTOR  andBool CUR_EPOCH_SCALE_FACTOR  <=Int maxDecimal
    andBool 0  <Int CUR_EPOCH               andBool CUR_EPOCH               <=Int maxSInt128
    andBool 0  <Int REWARD_FACTOR           andBool REWARD_FACTOR           <=Int maxDecimal  // assert self.reward_factor > 0 in `initialize_epoch()`
    andBool 0 <=Int EXPECTED_SOURCE_EPOCH   andBool EXPECTED_SOURCE_EPOCH   <=Int maxSInt128
    andBool 0  <Int EPOCH_LENGTH            andBool EPOCH_LENGTH            <=Int maxSInt128
    andBool 0 <=Int DEFAULT_END_DYN         andBool DEFAULT_END_DYN         <=Int maxSInt128
    andBool VIDKEY ==Int VINDEX /Int 256
    andBool COINBASE_NOUNCE ==Int 1
    andBool 0 <=Int COINBASE_BAL            andBool COINBASE_BAL            <=Int maxUInt256
    // FIXME
    andBool 0 <Int VINDEX modInt 256
    // Overflow check
    andBool (CUR_EPOCH *Int EPOCH_LENGTH)    <=Int maxSInt128
    andBool (CUR_DYN_VOTES +Int VDEPOSIT)    <=Int maxDecimal
    andBool (PREV_DYN_VOTES +Int VDEPOSIT)   <=Int maxDecimal
    andBool (VDEPOSIT *Int REWARD_FACTOR)    <=Int maxDecimal *Int 10000000000
    andBool ((TOTAL_CUR_DYN_DEPOSITS +Int REWARD *Int 10000000000)  *Int 2) <=Int maxDecimal
    andBool ((TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000) *Int 2) <=Int maxDecimal
    andBool (S_EPOCH +Int 1) <=Int maxSInt128
    andBool (VDEPOSIT +Int REWARD *Int 10000000000) <=Int maxDecimal
    andBool minDecimal <=Int (DYN_WEI_DELTA -Int REWARD *Int 10000000000)
    andBool TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000 <=Int maxDecimal
    andBool TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000 <=Int maxDecimal
    andBool REWARD *Int CUR_EPOCH_SCALE_FACTOR <=Int maxDecimal
    andBool 0 <=Int CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
    andBool COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) <=Int maxUInt256
    // Path constraint
    // recommended_target_hash
    andBool BLOCK_NUM -Int 256 <=Int #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH)
    andBool #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH) <Int BLOCK_NUM
    andBool #notVoteBefore(VOTE_VECTOR, VINDEX)
    // assert target_hash == self.recommended_target_hash()
    andBool T_HASH  ==Int #recommendedBlockHash(BLOCK_HASHES, BLOCK_NUM, CUR_EPOCH, EPOCH_LENGTH)
    // assert target_epoch == self.current_epoch
    andBool T_EPOCH ==Int CUR_EPOCH
    andBool #inCurDynasty(START_DYN, END_DYN, CUR_DYN)
    andBool #inPrevDynasty(START_DYN, END_DYN, CUR_DYN)
    // if self.expected_source_epoch == source_epoch
    andBool S_EPOCH ==Int EXPECTED_SOURCE_EPOCH
    // proc_reward
    andBool REWARD  ==Int ((VDEPOSIT *Int REWARD_FACTOR) /Int 10000000000) /Int 10000000000
    andBool END_DYN <Int DEFAULT_END_DYN
    andBool 0  <Int (REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000
    andBool CASPER_ACCT_ID =/=Int COINBASE_ACCT_ID
    // if (current_dynasty_votes >= self.total_curdyn_deposits * 2 / 3 and previous_dynasty_votes >= self.total_prevdyn_deposits * 2 / 3)
    andBool #isJustified(CUR_DYN_VOTES +Int VDEPOSIT, TOTAL_CUR_DYN_DEPOSITS +Int REWARD *Int 10000000000, PREV_DYN_VOTES +Int VDEPOSIT, TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000)
    // if target_epoch == source_epoch + 1
    andBool T_EPOCH ==Int S_EPOCH +Int 1
ensures:
attribute:

[delete_validator]
comment: 
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("delete_validator", #int128(VINDEX))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: GCAP => GCAP -Int 121213
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _ => _
coinbase: _
activeAccounts: SetItem(CASPER_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage:
    // self.validators[validator_index].deposit
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> (VDEPOSIT => 0))
    // self.validators[validator_index].addr
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {ADDR}) |-> (VADDR => 0))
    // self.validators[validator_index].end_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {END_DYNASTY}) |-> (END_DYN => 0))
    // self.validators[validator_index].start_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {START_DYNASTY}) |-> (START_DYN => 0))
    // self.validators[validator_index].withdrawal_addr
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {WITHDRAWAL_ADDR}) |-> (VWITHDRAWALADDR => 0))
    // self.validator_indexes[self.validators[validator_index].withdrawal_addr]
    (#hashedLocation({COMPILER}, {VALIDATOR_INDEXES}, VWITHDRAWALADDR) |-> (VAL_IDX => 0))
accounts: 
requires:
    // Range
    andBool #rangeSInt(128, VINDEX)
    andBool #rangeUInt(256, CASPER_BAL)
    andBool #rangeSFixed(128, 10, VDEPOSIT)
    andBool #rangeAddress(VADDR)
    andBool #rangeSInt(128, END_DYN)
    andBool #rangeSInt(128, START_DYN)
    andBool #rangeAddress(VWITHDRAWALADDR)
    andBool #rangeSInt(128, VAL_IDX)
    // Invariant
    andBool VINDEX >Int 0
    // Path condition
    andBool CALLER_ID ==Int CASPER_ACCT_ID
    // Call depth
    andBool #range(0 <= CD < 1024)
    // Gas
    andBool GCAP >=Int 121213
ensures:
attribute:

; TODO: make sure it cannot be called by others
; [delete_validator-failure]
; statusCode: _ => EVMC_INVALID
; requires:
;     andBool CALLER_ID =/=Int CASPER_ACCT_ID


[pgm]
compiler: "Vyper"
; self.validators
validators: 0
addr: 0
deposit: 1
end_dynasty: 2
start_dynasty: 3
withdrawal_addr: 4
; self.checkpoint_hashes
checkpoint_hashes: 1
; self.validator_indexes
validator_indexes: 3
; self.dynasty
dynasty: 4
; self.dynasty_wei_delta
dynasty_wei_delta: 5
; self.total_curdyn_deposits
total_curdyn_deposits: 6
; self.total_prevdyn_deposits
total_prevdyn_deposits: 7
; self.dynasty_in_epoch
dynasty_in_epoch: 9
; self.votes
votes: 10
cur_dyn_votes: 0
is_finalized: 1
is_justified: 2
prev_dyn_votes: 3
vote_bitmap: 4
; self.main_hash_justified
main_hash_justified: 11
; self.deposit_scale_factor
deposit_scale_factor: 12
; self.current_epoch
current_epoch: 15
; self.last_finalized_epoch
last_finalized_epoch: 16
; self.last_justified_epoch
last_justified_epoch: 17
; self.reward_factor
reward_factor: 18
; self.expected_source_epoch
expected_source_epoch: 19
; self.EPOCH_LENGTH
EPOCH_LENGTH: 21
; self.DEFAULT_END_DYNASTY
DEFAULT_END_DYNASTY: 30
code: "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263db23eee060005114156103c35734156100ac57600080fd5b3033146100b857600080fd5b600f54610140526060516001600060a051670de0b6b3a764000060a05160605160016101405103806040519013585780919012156100f557600080fd5b600c60c052602060c0200154600754600654808212156101155780610117565b815b90509050818102811983838305141761012f57600080fd5b6402540be40081059050905090508060805190135857809190121561015357600080fd5b058060805190135857809190121561016a57600080fd5b1215610227576402540be4006402540be3ff60a051670de0b6b3a764000060a05160605160016101405103806040519013585780919012156101ab57600080fd5b600c60c052602060c0200154600754600654808212156101cb57806101cd565b815b9050905081810281198383830514176101e557600080fd5b6402540be40081059050905090508060805190135857809190121561020957600080fd5b058060805190135857809190121561022057600080fd5b03056102d3565b6402540be40060a051670de0b6b3a764000060a051606051600161014051038060405190135857809190121561025c57600080fd5b600c60c052602060c02001546007546006548082121561027c578061027e565b815b90509050818102811983838305141761029657600080fd5b6402540be4008105905090509050806080519013585780919012156102ba57600080fd5b05806080519013585780919012156102d157600080fd5b055b01806040519013585780919012156102ea57600080fd5b6101605260a0516404a817c80068056bc75e2d631000006101605102058060805190135857809190121561031d57600080fd5b610180526101a060006014818352015b60a051600260a05160a051610180518061034657600080fd5b68056bc75e2d631000006101605102058060805190135857809190121561036c57600080fd5b61018051018060805190135857809190121561038757600080fd5b058060805190135857809190121561039e57600080fd5b610180525b815160010180835281141561032d575b50506101805160005260206000f3005b63bcc44d99600051141561042657602060046101403734156103e457600080fd5b6060516004358060405190135857809190121561040057600080fd5b50600161014051600060c052602060c0200160c052602060c020015460005260206000f3005b63faf944fa6000511415610489576020600461014037341561044757600080fd5b6060516004358060405190135857809190121561046357600080fd5b50600361014051600060c052602060c0200160c052602060c020015460005260206000f3005b63c253bf4160005114156104ec57602060046101403734156104aa57600080fd5b606051600435806040519013585780919012156104c657600080fd5b50600261014051600060c052602060c0200160c052602060c020015460005260206000f3005b63bb0115f0600051141561054c576020600461014037341561050d57600080fd5b6060516004358060405190135857809190121561052957600080fd5b5061014051600060c052602060c0200160c052602060c0205460005260206000f3005b635dbfd1ce60005114156105af576020600461014037341561056d57600080fd5b6060516004358060405190135857809190121561058957600080fd5b50600461014051600060c052602060c0200160c052602060c020015460005260206000f3005b638208b875600051141561060757602060046101403734156105d057600080fd5b606051600435806040519013585780919012156105ec57600080fd5b5061014051600160c052602060c020015460005260206000f3005b637d69c5d9600051141561062d57341561062057600080fd5b60025460005260206000f3005b63dc2059b3600051141561067a576020600461014037341561064e57600080fd5b600435602051811061065f57600080fd5b5061014051600360c052602060c020015460005260206000f3005b637060054d60005114156106a057341561069357600080fd5b60045460005260206000f3005b63c44dc65960005114156106f857602060046101403734156106c157600080fd5b606051600435806040519013585780919012156106dd57600080fd5b5061014051600560c052602060c020015460005260206000f3005b63a2630bae6000511415610750576020600461014037341561071957600080fd5b6060516004358060405190135857809190121561073557600080fd5b5061014051600860c052602060c020015460005260206000f3005b6365ca80e660005114156107a8576020600461014037341561077157600080fd5b6060516004358060405190135857809190121561078d57600080fd5b5061014051600960c052602060c020015460005260206000f3005b63fd87ef9d600051141561083257604060046101403734156107c957600080fd5b606051600435806040519013585780919012156107e557600080fd5b506060516024358060405190135857809190121561080257600080fd5b506101605161014051600a60c052602060c0200160c052602060c02060c052602060c020015460005260206000f3005b634ac756cb60005114156108bf576040600461014037341561085357600080fd5b6060516004358060405190135857809190121561086f57600080fd5b506060516024358060405190135857809190121561088c57600080fd5b5061016051600361014051600a60c052602060c0200160c052602060c0200160c052602060c020015460005260206000f3005b6365fc181d600051141561094c57604060046101403734156108e057600080fd5b606051600435806040519013585780919012156108fc57600080fd5b506060516024358060405190135857809190121561091957600080fd5b5061016051600461014051600a60c052602060c0200160c052602060c0200160c052602060c020015460005260206000f3005b63cce38da560005114156109af576020600461014037341561096d57600080fd5b6060516004358060405190135857809190121561098957600080fd5b50600261014051600a60c052602060c0200160c052602060c020015460005260206000f3005b63634f21d26000511415610a1257602060046101403734156109d057600080fd5b606051600435806040519013585780919012156109ec57600080fd5b50600161014051600a60c052602060c0200160c052602060c020015460005260206000f3005b6399787ac66000511415610a38573415610a2b57600080fd5b600b5460005260206000f3005b63e430757f6000511415610a905760206004610140373415610a5957600080fd5b60605160043580604051901358578091901215610a7557600080fd5b5061014051600c60c052602060c020015460005260206000f3005b638a4844076000511415610ab6573415610aa957600080fd5b600d5460005260206000f3005b63e6b573666000511415610adc573415610acf57600080fd5b600e5460005260206000f3005b639372b4e46000511415610b02573415610af557600080fd5b600f5460005260206000f3005b632eff87596000511415610b28573415610b1b57600080fd5b60105460005260206000f3005b635f6116506000511415610b4e573415610b4157600080fd5b60115460005260206000f3005b6307dcf45b6000511415610b74573415610b6757600080fd5b60125460005260206000f3005b635b03544a6000511415610b9a573415610b8d57600080fd5b60135460005260206000f3005b63ac4746ab6000511415610bc0573415610bb357600080fd5b60155460005260206000f3005b630ebb172a6000511415610be6573415610bd957600080fd5b60165460005260206000f3005b634f4ddb5e6000511415610c0c573415610bff57600080fd5b60175460005260206000f3005b633f8a500e6000511415610c32573415610c2557600080fd5b601b5460005260206000f3005b6361073e886000511415610c58573415610c4b57600080fd5b601c5460005260206000f3005b"
